# vulnerable_script.py

import os
import subprocess
import sqlite3
import hashlib
import json

# 1. Insecure File Upload (Arbitrary File Upload)
def upload_file(file):
    with open(f"/tmp/{file.filename}", "wb") as f:
        f.write(file.read())
    print("File uploaded successfully!")

# 2. Command Injection
def run_command(command):
    subprocess.run(command, shell=True)

# 3. SQL Injection
def get_user_info(user_id):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    query = f"SELECT * FROM users WHERE id = {user_id};"  # Vulnerable to SQL injection
    cursor.execute(query)
    return cursor.fetchall()

# 4. Insecure Deserialization
def load_user_data(data):
    return json.loads(data)  # Could allow for code execution if data is tampered

# 5. Cross-Site Scripting (XSS)
def render_page(content):
    print(f"<html><body>{content}</body></html>")  # Content not sanitized

# 6. Hardcoded Credentials
DATABASE_PASSWORD = "password123"  # Hardcoded password

# 7. Information Disclosure
def print_sensitive_info():
    secret_data = "This is sensitive information!"
    print(secret_data)  # Leaking sensitive information

# 8. Buffer Overflow (in Python, it's less common but still possible with certain libraries)
def overflow_example():
    arr = []
    for i in range(10000000):  # Excessive memory allocation
        arr.append(i)

# 9. Insecure Randomness
def insecure_random():
    return os.urandom(16)  # Should use a cryptographically secure random generator

# 10. Weak Hashing
def hash_password(password):
    return hashlib.md5(password.encode()).hexdigest()  # MD5 is weak

# 11. Open Redirect
def redirect_user(url):
    print(f"Redirecting to {url}")  # Vulnerable to open redirect

# 12. Using eval (Risk of Remote Code Execution)
def evaluate_expression(expr):
    return eval(expr)  # Dangerous if expr is user-controlled

# Sample usage of vulnerabilities
if __name__ == "__main__":
    print("Testing vulnerabilities...")

    # Insecure File Upload
    class MockFile:
        filename = "malicious_file.txt"

    upload_file(MockFile())

    # Command Injection
    run_command("ls -l; echo This is an injected command")

    # SQL Injection
    print(get_user_info("1 OR 1=1"))  # SQL injection example

    # Insecure Deserialization
    malicious_data = '{"__class__": "__main__.EvilClass", "data": "malicious_data"}'
    print(load_user_data(malicious_data))

    # Cross-Site Scripting
    render_page("<script>alert('XSS')</script>")

    # Information Disclosure
    print_sensitive_info()

    # Insecure Randomness
    print(insecure_random())

    # Weak Hashing
    print(hash_password("my_secure_password"))

    # Open Redirect
    redirect_user("http://evil.com")

    # Buffer Overflow (This might not crash the program but simulates excessive allocation)
    overflow_example()

    # Using eval
    print(evaluate_expression("2 + 2"))  # Example of eval usage
